const Booking = require('../models/Booking');
const mongoose = require('mongoose');
const { sendConfirmationEmail, sendAdminNotificationEmail } = require('../services/emailService');

// Fonctions du controller
const bookingController = {
   // Confirmation de r√©servation
   handleBookingConfirmation: async (req, res) => {
       try {
           const bookingId = req.params.id;
           const { pickupTime } = req.body;
          
           const booking = await Booking.findById(bookingId);
          
           if (!booking) {
               return res.status(404).json({
                   success: false,
                   message: "R√©servation non trouv√©e"
               });
           }
           
           // Si c'est une r√©servation group√©e
           if (booking.bookingGroupId) {
               return res.status(200).json({
                   success: true,
                   isGrouped: true,
                   groupId: booking.bookingGroupId
               });
           }
           
           // Pour une r√©servation simple
           const updateData = {
               status: 'confirmed'
           };
          
           if (booking.journey.outbound) {
               updateData['journey.outbound.pickupTime'] = pickupTime;
           }
           
           const updatedBooking = await Booking.findByIdAndUpdate(
               bookingId,
               { $set: updateData },
               { new: true }
           );
           
           await sendConfirmationEmail({
               to: booking.client.email,
               booking: updatedBooking
           });
           
           console.log(`‚úÖ R√©servation ${bookingId} confirm√©e`);
           
           return res.status(200).json({
               success: true,
               message: "R√©servation confirm√©e",
               data: updatedBooking
           });
       } catch (error) {
           console.error("‚ùå Erreur lors de la confirmation:", error.message);
           return res.status(500).json({
               success: false,
               message: "Erreur lors de la confirmation de la r√©servation",
               error: error.message
           });
       }
   },
   
   // Mise √† jour des gains du chauffeur
   updateDriverEarnings: async (req, res) => {
       try {
           const { id } = req.params;
           const { driverEarnings } = req.body;
           
           if (driverEarnings === undefined || driverEarnings < 0) {
               return res.status(400).json({
                   success: false,
                   message: "Les gains du chauffeur doivent √™tre un nombre positif"
               });
           }
           
           const booking = await Booking.findById(id);
           if (!booking) {
               return res.status(404).json({
                   success: false,
                   message: "R√©servation non trouv√©e"
               });
           }
           
           booking.driverEarnings = Number(driverEarnings);
           await booking.save();
           
           return res.status(200).json({
               success: true,
               message: "Gains du chauffeur mis √† jour",
               data: booking
           });
       } catch (error) {
           console.error("‚ùå Erreur lors de la mise √† jour des gains:", error.message);
           return res.status(500).json({
               success: false,
               message: "Erreur lors de la mise √† jour des gains",
               error: error.message
           });
       }
   },
   
   // Obtention des statistiques des gains par chauffeur
   getDriverEarningsStats: async (req, res) => {
       try {
           const { driverId } = req.params;
           const { startDate, endDate } = req.query;
           
           let matchQuery = {
               driver: driverId,
               status: { $in: ['completed', 'confirmed'] }
           };
           
           if (startDate && endDate) {
               matchQuery['journey.outbound.date'] = {
                   $gte: new Date(startDate),
                   $lte: new Date(endDate)
               };
           }
           
           const bookings = await Booking.find(matchQuery)
               .sort({ 'journey.outbound.date': -1 });
           
           const stats = {
               totalEarnings: 0,
               weekCashPayments: 0,
               numberOfBookings: bookings.length,
               bookings: []
           };
           
           const now = new Date();
           const startOfWeek = new Date(now.setDate(now.getDate() - now.getDay()));
           const endOfWeek = new Date(now.setDate(now.getDate() - now.getDay() + 6));
           
           bookings.forEach(booking => {
               stats.totalEarnings += booking.driverEarnings || 0;
               
               const bookingDate = new Date(booking.journey.outbound?.date || booking.journey.inbound?.date);
               if (bookingDate >= startOfWeek && bookingDate <= endOfWeek && booking.paymentMethod === 'cash') {
                   stats.weekCashPayments += booking.driverEarnings || 0;
               }
               
               stats.bookings.push({
                   id: booking._id,
                   date: bookingDate,
                   earnings: booking.driverEarnings,
                   client: `${booking.client.firstName} ${booking.client.lastName}`,
                   from: booking.client.address.city,
                   to: booking.journey.outbound?.airport || booking.journey.inbound?.airport,
                   paymentMethod: booking.paymentMethod
               });
           });
           
           return res.status(200).json({
               success: true,
               data: stats
           });
       } catch (error) {
           console.error("‚ùå Erreur r√©cup√©ration des statistiques:", error.message);
           return res.status(500).json({
               success: false,
               message: "Erreur lors de la r√©cup√©ration des statistiques",
               error: error.message
           });
       }
   },
   
   // Cr√©ation d'une r√©servation (route POST)
   createBooking: async (req, res) => {
       try {
           console.log('üì® Nouvelle demande de r√©servation re√ßue');
           
           if (req.body.journey.type === 'roundTrip') {
               // Pour un aller-retour, cr√©ez une seule r√©servation
               const bookingData = {
                   client: req.body.client,
                   journey: req.body.journey, // Conserve le journey complet avec type:'roundTrip'
                   options: req.body.options,
                   passengers: req.body.passengers,
                   serviceType: req.body.serviceType,
                   price: req.body.price,
                   paymentMethod: req.body.paymentMethod,
                   status: 'pending',
                   recommendedBy: req.body.recommendedBy,
                   agencyName: req.body.recommendedBy === 'agency' ? req.body.agencyName : '',
                   vatNumber: req.body.vatNumber
               };
               
               const booking = new Booking(bookingData);
               const savedBooking = await booking.save();
               
               console.log('‚úÖ R√©servation aller-retour cr√©√©e');
               
               // Envoi d'un seul email avec les informations compl√®tes
               try {
                   await sendAdminNotificationEmail(savedBooking);
                   console.log('‚úÖ Email de notification pour aller-retour envoy√©');
               } catch (emailError) {
                   console.error('‚ùå Erreur d\'envoi d\'email:', emailError.message);
               }
               
               // R√©ponse au client
               res.status(201).json({
                   success: true,
                   message: 'R√©servation aller-retour cr√©√©e avec succ√®s',
                   data: savedBooking
               });
           } else {
               // Pour un trajet simple (aller ou retour)
               const bookingData = {
                   client: req.body.client,
                   journey: req.body.journey,
                   options: req.body.options,
                   passengers: req.body.passengers,
                   serviceType: req.body.serviceType,
                   price: req.body.price,
                   paymentMethod: req.body.paymentMethod,
                   status: 'pending',
                   recommendedBy: req.body.recommendedBy,
                   agencyName: req.body.recommendedBy === 'agency' ? req.body.agencyName : '',
                   vatNumber: req.body.vatNumber
               };
               
               const booking = new Booking(bookingData);
               const savedBooking = await booking.save();
               
               console.log('‚úÖ R√©servation simple cr√©√©e');
               
               // Envoi de notification √† l'admin
               try {
                   await sendAdminNotificationEmail(savedBooking);
                   console.log('‚úÖ Email de notification pour trajet simple envoy√©');
               } catch (emailError) {
                   console.error('‚ùå Erreur d\'envoi d\'email:', emailError.message);
               }
               
               // R√©ponse au client
               res.status(201).json({
                   success: true,
                   message: 'R√©servation cr√©√©e avec succ√®s',
                   data: savedBooking
               });
           }
       } catch (error) {
        console.error('‚ùå Erreur cr√©ation de r√©servation:', error.message);
        res.status(500).json({
            success: false,
            message: 'Probl√®me de r√©servation ?\n\nSi vous rencontrez une erreur lors de votre r√©servation, essayez ces solutions :\n‚Ä¢ Utilisez un autre navigateur (Firefox, Chrome, Safari)\n‚Ä¢ D√©sactivez vos extensions de navigateur et antivirus\n‚Ä¢ Essayez depuis un autre appareil ou r√©seau internet\n‚Ä¢ D√©sactivez votre VPN si vous en utilisez un\n\nVous pouvez aussi nous contacter directement :\nüìû 0490/19.79.14\n‚úâÔ∏è info@spero-navette.be',
            error: error.message
           });
       }
   }
};

const handleStatusChange = async (req, res) => {
   try {
       const { id } = req.params;
       const { status } = req.body;
      
       const booking = await Booking.findById(id);
       if (!booking) {
           return res.status(404).json({ 
               success: false, 
               message: 'R√©servation non trouv√©e' 
           });
       }
       
       booking.status = status;
       await booking.save();
       
       console.log(`‚úÖ Statut de la r√©servation ${id} mis √† jour: ${status}`);
       
       if (status === 'confirmed' || status === 'rejected') {
           try {
               await sendConfirmationEmail({
                   to: booking.client.email,
                   booking,
                   template: status
               });
           } catch (emailError) {
               console.error('‚ùå Erreur d\'envoi d\'email:', emailError.message);
           }
       }
       
       res.json({ success: true, data: booking });
   } catch (error) {
       console.error('‚ùå Erreur changement de statut:', error.message);
       res.status(500).json({ 
           success: false, 
           error: error.message 
       });
   }
};

// Fonction pour envoyer un email de demande d'avis
const sendReviewRequest = async (req, res) => {
   try {
       const { id } = req.params;
      
       const booking = await Booking.findById(id);
       if (!booking) {
           return res.status(404).json({
               success: false,
               message: 'R√©servation non trouv√©e'
           });
       }
       
       // Envoyer l'email de demande d'avis
       try {
           await sendConfirmationEmail({
               to: booking.client.email,
               booking,
               template: 'review'
           });
           console.log(`‚úÖ Email de demande d'avis envoy√© √†: ${booking.client.email}`);
       } catch (emailError) {
           console.error('‚ùå Erreur d\'envoi d\'email d\'avis:', emailError.message);
           throw emailError;
       }
       
       res.json({
           success: true,
           message: 'Email de demande d\'avis envoy√© avec succ√®s'
       });
   } catch (error) {
       console.error('‚ùå Erreur envoi demande d\'avis:', error.message);
       res.status(500).json({
           success: false,
           error: error.message
       });
   }
};

module.exports = {
   ...bookingController,
   handleStatusChange,
   sendReviewRequest
};